import streamlit as st
import pandas as pd
import numpy as np
from backend.investigacion_operaciones import shortest_path

def render():
    st.header("Problema de Camino M√°s Corto")
    st.markdown("""
    **Definici√≥n:** El problema de camino m√°s corto consiste en encontrar la ruta de menor costo 
    (distancia, tiempo, etc.) entre dos nodos en una red, donde cada arco tiene un costo asociado.
    """)
    
    st.subheader("Configuraci√≥n de la Red")
    
    # N√∫mero de nodos
    num_nodes = st.number_input("N√∫mero de nodos", min_value=3, max_value=8, value=4, step=1)
    
    # Matriz de adyacencia
    st.subheader("Matriz de Adyacencia (Distancias)")
    st.write("Ingresa las distancias entre nodos (0 = sin conexi√≥n):")
    
    adjacency_matrix = []
    for i in range(num_nodes):
        st.write(f"**Desde nodo {i+1}:**")
        cols = st.columns(num_nodes)
        row = []
        for j in range(num_nodes):
            with cols[j]:
                if i == j:
                    distance = 0
                    st.write("0")
                else:
                    distance = st.number_input(f"Hacia nodo {j+1}", value=0.0, min_value=0.0, step=0.1, key=f"dist_{i}_{j}")
                row.append(distance)
        adjacency_matrix.append(row)
    
    # Mostrar matriz de adyacencia
    st.subheader("Matriz de Adyacencia")
    adj_df = pd.DataFrame(adjacency_matrix, 
                           index=[f'Nodo {i+1}' for i in range(num_nodes)],
                           columns=[f'Nodo {j+1}' for j in range(num_nodes)])
    st.dataframe(adj_df, use_container_width=True)
    
    # Nodos de inicio y destino
    st.subheader("Nodos de Inicio y Destino")
    col1, col2 = st.columns(2)
    with col1:
        start_node = st.selectbox("Nodo de inicio", range(num_nodes), format_func=lambda x: f"Nodo {x+1}")
    with col2:
        end_node = st.selectbox("Nodo de destino", range(num_nodes), format_func=lambda x: f"Nodo {x+1}")
    
    # Bot√≥n para resolver
    if st.button("Encontrar Camino M√°s Corto"):
        try:
            result = shortest_path(adjacency_matrix, start_node, end_node)
            
            if result['success']:
                st.success("‚úÖ Camino encontrado exitosamente!")
                
                # Mostrar distancia total
                st.metric("Distancia Total", f"{result['distance']:.2f}")
                
                # Mostrar camino
                st.subheader("Camino √ìptimo")
                path = result['path']
                path_str = " ‚Üí ".join([f"Nodo {node+1}" for node in path])
                st.write(f"**Ruta:** {path_str}")
                
                # Mostrar detalles del camino
                st.subheader("Detalles del Camino")
                if len(path) > 1:
                    total_distance = 0
                    path_details = []
                    
                    for i in range(len(path) - 1):
                        from_node = path[i]
                        to_node = path[i + 1]
                        distance = adjacency_matrix[from_node][to_node]
                        total_distance += distance
                        path_details.append({
                            'Desde': f'Nodo {from_node + 1}',
                            'Hacia': f'Nodo {to_node + 1}',
                            'Distancia': f'{distance:.2f}'
                        })
                    
                    path_df = pd.DataFrame(path_details)
                    st.dataframe(path_df, use_container_width=True)
                    
                    st.metric("Distancia Total Verificada", f"{total_distance:.2f}")
                else:
                    st.info("El nodo de inicio y destino son el mismo.")
                
                # Mostrar todas las distancias desde el nodo de inicio
                st.subheader("Distancias desde el Nodo de Inicio")
                distances = result['all_distances']
                distances_df = pd.DataFrame({
                    'Nodo': [f'Nodo {i+1}' for i in range(num_nodes)],
                    'Distancia': [f"{dist:.2f}" if dist != float('inf') else "‚àû" for dist in distances]
                })
                st.dataframe(distances_df, use_container_width=True)
                
            else:
                st.error(f"‚ùå Error al encontrar el camino: {result.get('error', 'Error desconocido')}")
                
        except Exception as e:
            st.error(f"‚ùå Error inesperado: {str(e)}")
    
    # Visualizaci√≥n de la red
    with st.expander("üìä Visualizaci√≥n de la Red"):
        st.write("**Representaci√≥n gr√°fica de la red:**")
        
        # Crear un diagrama simple usando texto
        nodes = [f"N{i+1}" for i in range(num_nodes)]
        
        # Mostrar conexiones
        connections = []
        for i in range(num_nodes):
            for j in range(num_nodes):
                if i != j and adjacency_matrix[i][j] > 0:
                    connections.append(f"{nodes[i]} ‚Üí {nodes[j]} ({adjacency_matrix[i][j]:.1f})")
        
        if connections:
            for conn in connections:
                st.write(f"‚Ä¢ {conn}")
        else:
            st.write("No hay conexiones definidas.")
    
    # Informaci√≥n adicional
    with st.expander("‚ÑπÔ∏è Informaci√≥n sobre el Problema de Camino M√°s Corto"):
        st.markdown("""
        **¬øQu√© es el Problema de Camino M√°s Corto?**
        
        Es un problema de optimizaci√≥n en grafos que busca encontrar la ruta de menor costo 
        entre dos nodos en una red.
        
        **Caracter√≠sticas:**
        - **Grafo dirigido o no dirigido**
        - **Pesos no negativos** en las aristas
        - **Objetivo:** Minimizar la suma de pesos del camino
        
        **Algoritmos comunes:**
        - **Dijkstra:** Para grafos con pesos no negativos
        - **Bellman-Ford:** Para grafos con pesos negativos
        - **Floyd-Warshall:** Para todos los pares de nodos
        - **A\*:** Para b√∫squeda heur√≠stica
        
        **Aplicaciones:**
        - Planificaci√≥n de rutas (GPS)
        - Redes de comunicaci√≥n
        - Optimizaci√≥n de redes de transporte
        - An√°lisis de redes sociales
        - Sistemas de recomendaci√≥n
        """)
    
    # Ejemplo pr√°ctico
    with st.expander("üìù Ejemplo Pr√°ctico"):
        st.markdown("""
        **Ejemplo: Red de Ciudades**
        
        Considera una red de ciudades conectadas por carreteras:
        
        ```
        A ----5---- B
        |           |
        3           2
        |           |
        C ----1---- D
        ```
        
        **Distancias:**
        - A ‚Üí B: 5 km
        - A ‚Üí C: 3 km  
        - B ‚Üí D: 2 km
        - C ‚Üí D: 1 km
        
        **Camino m√°s corto de A a D:**
        - A ‚Üí C ‚Üí D: 3 + 1 = 4 km ‚úì
        - A ‚Üí B ‚Üí D: 5 + 2 = 7 km
        
        La ruta √≥ptima es A ‚Üí C ‚Üí D con una distancia total de 4 km.
        """)
