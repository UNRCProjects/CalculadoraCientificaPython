import streamlit as st
import string

def render():
    st.header("üîê Cifrado de C√©sar")
    
    st.markdown("""
    ### ¬øQu√© es el Cifrado de C√©sar?
    
    El cifrado de C√©sar es uno de los m√©todos de cifrado m√°s antiguos y simples. 
    Es un tipo de cifrado por sustituci√≥n en el que cada letra del texto original 
    es reemplazada por otra letra que se encuentra un n√∫mero fijo de posiciones 
    m√°s adelante en el alfabeto.
    """)
    
    # Ejemplo visual
    st.markdown("""
    **Ejemplo:** Si usamos un desplazamiento de 3:
    - A ‚Üí D
    - B ‚Üí E  
    - C ‚Üí F
    - ... y as√≠ sucesivamente
    """)
    
    # Secci√≥n de cifrado
    st.subheader("üîí Cifrar Texto")
    
    col1, col2 = st.columns(2)
    
    with col1:
        texto_original = st.text_area(
            "Texto a cifrar:",
            value="HOLA MUNDO",
            height=100,
            help="Ingresa el texto que quieres cifrar"
        )
        
        desplazamiento = st.number_input(
            "Desplazamiento:",
            min_value=1,
            max_value=25,
            value=3,
            help="N√∫mero de posiciones a desplazar (1-25)"
        )
    
    with col2:
        if st.button("üîê Cifrar", key="cifrar_btn"):
            if texto_original:
                texto_cifrado = cifrar_cesar(texto_original, desplazamiento)
                st.text_area("Texto cifrado:", value=texto_cifrado, height=100)
            else:
                st.warning("‚ö†Ô∏è Por favor ingresa un texto para cifrar")
    
    # Secci√≥n de descifrado
    st.subheader("üîì Descifrar Texto")
    
    col1, col2 = st.columns(2)
    
    with col1:
        texto_cifrado_input = st.text_area(
            "Texto cifrado:",
            value="",
            height=100,
            help="Ingresa el texto que quieres descifrar"
        )
        
        desplazamiento_descifrar = st.number_input(
            "Desplazamiento:",
            min_value=1,
            max_value=25,
            value=3,
            key="desplazamiento_descifrar",
            help="N√∫mero de posiciones que se us√≥ para cifrar"
        )
    
    with col2:
        if st.button("üîì Descifrar", key="descifrar_btn"):
            if texto_cifrado_input:
                texto_descifrado = descifrar_cesar(texto_cifrado_input, desplazamiento_descifrar)
                st.text_area("Texto descifrado:", value=texto_descifrado, height=100)
            else:
                st.warning("‚ö†Ô∏è Por favor ingresa un texto cifrado para descifrar")
    
    # Secci√≥n de an√°lisis autom√°tico
    st.subheader("üîç An√°lisis Autom√°tico")
    
    texto_analizar = st.text_input(
        "Texto para analizar:",
        value="",
        help="Ingresa un texto cifrado para intentar descifrarlo autom√°ticamente"
    )
    
    if st.button("üîç Analizar y Descifrar"):
        if texto_analizar:
            with st.spinner("Analizando texto..."):
                resultados = analizar_cesar(texto_analizar)
                
                st.write("**Posibles descifrados:**")
                for i, (desplazamiento, texto) in enumerate(resultados[:5], 1):
                    with st.expander(f"Opci√≥n {i}: Desplazamiento {desplazamiento}"):
                        st.write(f"**Texto descifrado:** {texto}")
                        if st.button(f"Seleccionar esta opci√≥n", key=f"seleccionar_{i}"):
                            st.session_state['texto_descifrado'] = texto
                            st.success("‚úÖ Texto seleccionado")
        else:
            st.warning("‚ö†Ô∏è Por favor ingresa un texto para analizar")
    
    # Informaci√≥n adicional
    st.subheader("‚ÑπÔ∏è Informaci√≥n Adicional")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **Ventajas del Cifrado de C√©sar:**
        - ‚úÖ Simple de entender e implementar
        - ‚úÖ R√°pido de usar
        - ‚úÖ Hist√≥ricamente importante
        """)
    
    with col2:
        st.markdown("""
        **Desventajas:**
        - ‚ùå Muy f√°cil de descifrar
        - ‚ùå Solo 25 claves posibles
        - ‚ùå Vulnerable a an√°lisis de frecuencia
        """)
    
    # Ejemplo pr√°ctico
    st.subheader("üìö Ejemplo Pr√°ctico")
    
    st.markdown("""
    **Ejemplo hist√≥rico:** Julio C√©sar usaba un desplazamiento de 3 para comunicarse con sus generales.
    
    - **Texto original:** "ATACAR AL AMANECER"
    - **Desplazamiento:** 3
    - **Texto cifrado:** "DWDFDU DO DPDQHFHU"
    """)

def cifrar_cesar(texto, desplazamiento):
    """Cifra un texto usando el m√©todo de C√©sar"""
    resultado = ""
    
    for caracter in texto:
        if caracter.isalpha():
            # Determinar si es may√∫scula o min√∫scula
            if caracter.isupper():
                # Para may√∫sculas: A=65, Z=90
                codigo = ord(caracter) - ord('A')
                nuevo_codigo = (codigo + desplazamiento) % 26
                resultado += chr(nuevo_codigo + ord('A'))
            else:
                # Para min√∫sculas: a=97, z=122
                codigo = ord(caracter) - ord('a')
                nuevo_codigo = (codigo + desplazamiento) % 26
                resultado += chr(nuevo_codigo + ord('a'))
        else:
            # Mantener caracteres que no son letras
            resultado += caracter
    
    return resultado

def descifrar_cesar(texto_cifrado, desplazamiento):
    """Descifra un texto usando el m√©todo de C√©sar"""
    resultado = ""
    
    for caracter in texto_cifrado:
        if caracter.isalpha():
            # Determinar si es may√∫scula o min√∫scula
            if caracter.isupper():
                # Para may√∫sculas: A=65, Z=90
                codigo = ord(caracter) - ord('A')
                nuevo_codigo = (codigo - desplazamiento) % 26
                resultado += chr(nuevo_codigo + ord('A'))
            else:
                # Para min√∫sculas: a=97, z=122
                codigo = ord(caracter) - ord('a')
                nuevo_codigo = (codigo - desplazamiento) % 26
                resultado += chr(nuevo_codigo + ord('a'))
        else:
            # Mantener caracteres que no son letras
            resultado += caracter
    
    return resultado

def analizar_cesar(texto_cifrado):
    """Analiza un texto cifrado probando todos los desplazamientos posibles"""
    resultados = []
    
    for desplazamiento in range(1, 26):
        texto_descifrado = descifrar_cesar(texto_cifrado, desplazamiento)
        # Calcular un score basado en la frecuencia de letras comunes en espa√±ol
        score = calcular_score_espanol(texto_descifrado)
        resultados.append((desplazamiento, texto_descifrado, score))
    
    # Ordenar por score (mayor score = m√°s probable que sea correcto)
    resultados.sort(key=lambda x: x[2], reverse=True)
    
    return [(desplazamiento, texto) for desplazamiento, texto, score in resultados]

def calcular_score_espanol(texto):
    """Calcula un score basado en la frecuencia de letras comunes en espa√±ol"""
    # Frecuencias aproximadas de letras en espa√±ol
    frecuencias = {
        'E': 0.1368, 'A': 0.1253, 'O': 0.0868, 'I': 0.0701, 'S': 0.0718,
        'N': 0.0671, 'R': 0.0612, 'U': 0.0468, 'L': 0.0495, 'D': 0.0468,
        'T': 0.0392, 'C': 0.0392, 'P': 0.0316, 'M': 0.0316, 'B': 0.0141,
        'G': 0.0101, 'V': 0.0101, 'Y': 0.0101, 'Q': 0.0088, 'H': 0.0070,
        'F': 0.0053, 'J': 0.0044, 'Z': 0.0035, 'X': 0.0002, 'K': 0.0002,
        'W': 0.0002
    }
    
    score = 0
    texto_upper = texto.upper()
    
    for letra, frecuencia in frecuencias.items():
        count = texto_upper.count(letra)
        score += count * frecuencia
    
    return score
